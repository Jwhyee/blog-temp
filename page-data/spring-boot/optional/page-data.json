{"componentChunkName":"component---src-templates-blog-post-js","path":"/spring-boot/optional/","result":{"data":{"site":{"siteMetadata":{"title":"Jwhy Blogitory","author":"[Jwhy]","siteUrl":"https://jwhyee.github.io","comment":{"disqusShortName":"","utterances":"Jwhyee/Jwhyee.github.io"},"sponsor":{"buyMeACoffeeId":"jwhy"}}},"markdownRemark":{"id":"1e37e390-85d4-5900-86fc-c5310ca85b73","excerpt":"Opiotnal이란? 아래 코드를 통해 간단하게 이해해보자! 만약 존재하지 않는 가 들어왔을 경우 에는 값이 저장된다.\n이런 상황에서 방어 로직 없이 코드가 돌아가면 에서 난잡한 에러 구문을 보게 될 것이다.\n이와 같이 사용할 객체에 이 들어올 경우를 대비해 사용하기 위한 것이라고 생각하면 된다. 사용 예시 1️⃣ orElse(), orElseThrow…","html":"<h2 id=\"opiotnal이란\" style=\"position:relative;\"><a href=\"#opiotnal%EC%9D%B4%EB%9E%80\" aria-label=\"opiotnal이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Opiotnal이란?</h2>\n<p>아래 코드를 통해 간단하게 이해해보자!</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostController</span><span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/post/{id}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">postDetail</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token keyword\">long</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Post</span> currentPost <span class=\"token operator\">=</span> postService<span class=\"token punctuation\">.</span><span class=\"token function\">findPostById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span> currentPost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"post/detail\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostService</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Post</span> <span class=\"token function\">findPostById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> postRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약 존재하지 않는 <code class=\"language-text\">id</code>가 들어왔을 경우 <code class=\"language-text\">Post</code>에는 <code class=\"language-text\">null</code>값이 저장된다.<br>\n이런 상황에서 방어 로직 없이 코드가 돌아가면 <code class=\"language-text\">detail.html</code>에서 난잡한 에러 구문을 보게 될 것이다.<br>\n이와 같이 사용할 객체에 <code class=\"language-text\">null</code>이 들어올 경우를 대비해 사용하기 위한 것이라고 생각하면 된다.</p>\n<h2 id=\"사용-예시\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\" aria-label=\"사용 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용 예시</h2>\n<h3 id=\"1️⃣-orelse-orelsethrow\" style=\"position:relative;\"><a href=\"#1%EF%B8%8F%E2%83%A3-orelse-orelsethrow\" aria-label=\"1️⃣ orelse orelsethrow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1️⃣ orElse(), orElseThrow()</h3>\n<blockquote>\n<p>해당 객체가 <code class=\"language-text\">null</code>이 아니면 꺼내오고, 그게 아니면 <code class=\"language-text\">Else(...)</code>를 실행한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostService</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Post</span> <span class=\"token function\">findPostById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">></span></span> findPost <span class=\"token operator\">=</span> postRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> findPost<span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 <code class=\"language-text\">Optional</code>을 사용했지만, 이전에 작성했던 코드와 다를게 없다.<br>\n<code class=\"language-text\">orElse()</code>를 이상적으로 사용하기 위해서는 아래 코드와 같이 <code class=\"language-text\">Exception</code>을 곁들여 사용하는게 좋다고 생각한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Custom Exception</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostIdException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PostIdException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Exception Handler</span>\n<span class=\"token annotation punctuation\">@ControllerAdvice</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExceptionHandler</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">PostIdException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@ResponseBody</span> <span class=\"token class-name\">String</span> <span class=\"token function\">notExistId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PostIdException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PostIdException={}\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Script</span><span class=\"token punctuation\">.</span><span class=\"token function\">href</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostService</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Post</span> <span class=\"token function\">findPostById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">></span></span> findPost <span class=\"token operator\">=</span> postRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> findPost<span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PostIdException</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">+</span> <span class=\"token string\">\"번 게시물은 존재하지 않습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Controller에서 없는 id를 가져와 Service에 전달했다고 가정하자.<br>\n전달할 객체가 null이 아니면 DB에서 찾은 Post 객체를 전달하겠지만, 존재하지 않으면 <code class=\"language-text\">PostIdException</code>을 발생시킨다.<br>\n이렇게 발생한 <code class=\"language-text\">Exception</code>은 <code class=\"language-text\">@ControllerAdvice</code>가 붙은 <code class=\"language-text\">Handler</code>를 통해 관리된다.</p>\n<blockquote>\n<p>이전 코드보다 훨씬 복잡하지만, 가장 안정적인 구조를 하고 있다.<br>\n이렇게 없는 <code class=\"language-text\">id</code>를 반환할 때 말고도 정말 다양하게 사용할 수 있는 구조이다.</p>\n</blockquote>\n<h3 id=\"2️⃣-get\" style=\"position:relative;\"><a href=\"#2%EF%B8%8F%E2%83%A3-get\" aria-label=\"2️⃣ get permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2️⃣ get()</h3>\n<blockquote>\n<p><code class=\"language-text\">Optional</code>에서 객체를 바로 꺼내는 방식</p>\n</blockquote>\n<p><code class=\"language-text\">get()</code>은 사실 많이 사용하지 않는다. 이 방식을 사용하는 것보단 <code class=\"language-text\">isPresent()</code>를 더 많이 사용한다.<br>\n아래 두 코드를 비교해서 보면, <strong>1번</strong>은 값이 없으면 <code class=\"language-text\">null</code>을 반환하고, <strong>2번</strong>은 값이 없으면 <code class=\"language-text\">NoSuchElementException</code>을 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostService</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Post</span> <span class=\"token function\">findPostById1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> postRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Post</span> <span class=\"token function\">findPostById2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> postRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>즉, 위 코드를 사용하기 위해서는 값이 존재하는지 먼저 확인한 뒤 <code class=\"language-text\">.get()</code>을 통해 값을 전달해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostService</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Post</span> <span class=\"token function\">findPostById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">></span></span> optPost <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>postRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Post</span> findPost <span class=\"token operator\">=</span> optPost<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> findPost<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>JPA에서 <code class=\"language-text\">findById()</code> 메소드는 기본적으로 <code class=\"language-text\">Optional&lt;T></code> 형태로 반환한다.<br>\n때문에 <code class=\"language-text\">postRepository.findById(id)</code>는 Optional 형태로 반환된 상태이고, <code class=\"language-text\">.get()</code>을 통해 <code class=\"language-text\">Post</code> 형태로 반환시킨다.<br>\n이렇게 <code class=\"language-text\">Post</code> 객체가 <code class=\"language-text\">null</code>인지 확인한 뒤, <code class=\"language-text\">null</code>이 아니면 <code class=\"language-text\">optPost.get()</code>을 사용하는데, 방어하는 코드를 추가적으로 더 작성해주어야 한다.</p>\n<blockquote>\n<p>하지만 이 방식은 Optional을 사용하는 목표와 맞지 않기 때문에 잘 사용하지 않는다.</p>\n</blockquote>\n<h3 id=\"3️⃣-ispresent-isempty-ifpresent\" style=\"position:relative;\"><a href=\"#3%EF%B8%8F%E2%83%A3-ispresent-isempty-ifpresent\" aria-label=\"3️⃣ ispresent isempty ifpresent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3️⃣ isPresent(), isEmpty(), ifPresent()</h3>\n<blockquote>\n<p>메소드 이름 앞에 <code class=\"language-text\">is</code>가 붙으면 대부분 <code class=\"language-text\">true || false</code>로 <strong>반환</strong>되는 메소드이다.<br>\n즉, 이름과 동일하게 값이 존재하는지, 비어있는지 확인하는 메소드이다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostService</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Post</span> <span class=\"token function\">findPostById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">></span></span> optPost <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>postRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>optPost<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> optPost<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NoSuchElementException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"아이디가 존재하지 않습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드처럼 <code class=\"language-text\">.get()</code>과 함께 사용하여 방어하는 로직을 구성할 수 있다.<br>\n개인마다 다르겠지만, 필자는 코드 길이나 유지보수를 하기에는 <code class=\"language-text\">orElseThrow()</code>가 더 편하다고 생각한다.<br>\n<code class=\"language-text\">isEmpty()</code>는 <code class=\"language-text\">isPresent()</code>와 비슷하기 때문에 설명은 생략하도록 하겠다.</p>\n<p>아래는 <code class=\"language-text\">ifPresent()</code>에 대한 예시 코드이다.<br>\n여기서 등장하는 <code class=\"language-text\">Member member</code>는 <code class=\"language-text\">Security</code>를 통해 로그인된 <code class=\"language-text\">Member</code> 객체를 의미한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostService</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPostOwner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> ownerName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> loginName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> ownerName<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>loginName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updatePost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PostDto</span> postDto<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">></span></span> optPost <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>postRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        optPost<span class=\"token punctuation\">.</span><span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span>post <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPostOwner</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">.</span>getMember<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> member<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                post <span class=\"token operator\">=</span> modelMapper<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>postDto<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                postRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>optPost<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NoSuchElementException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이이디가 존재하지 않습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 <code class=\"language-text\">id</code>를 가진 <code class=\"language-text\">Post</code>가 존재하는지 확인하기 위해 <code class=\"language-text\">Optional</code>로 감싸주었다.<br>\n만약 해당 <strong>객체</strong>가 <code class=\"language-text\">null</code>이 아니라면 익명 함수를 통해 로직을 구성해줄 수 있다.<br>\n이를 통해서 <code class=\"language-text\">Post</code> 작성자가 현재 로그인한 <code class=\"language-text\">Member</code>와 동일한지 확인한 뒤, 수정을 진행한다.</p>\n<p>이렇게 <code class=\"language-text\">Optional</code>을 이용하면 다양한 방식으로 <code class=\"language-text\">null</code>에 대한 방어 로직을 구성할 수 있다.<br>\n하지만 결론적으로 방어 로직을 구성하다보면, <code class=\"language-text\">Exception</code>을 던져줘야하는 상황이 발생하게 된다.<br>\n그럴 경우 <code class=\"language-text\">orElseThrow()</code>로 변경해주는 것도 좋은 방법이라고 생각한다.</p>\n<p><code class=\"language-text\">Optional</code>을 더 깊게 공부하고 싶다면 해당 <a href=\"https://www.latera.kr/blog/2019-07-02-effective-optional/#4-%EA%B0%92%EC%9D%B4-%EC%97%86%EB%8A%94-%EA%B2%BD%EC%9A%B0-optional-orelseget-%EC%9D%84-%ED%86%B5%ED%95%B4-%EC%9D%B4%EB%A5%BC-%EB%82%98%ED%83%80%EB%82%B4%EB%8A%94-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%A0%9C%EA%B3%B5%ED%95%A0-%EA%B2%83\">링크</a>를 참고하면 좋을 것 같다!</p>","frontmatter":{"title":"[Spring] - Optional의 사용","date":"December 20, 2022"}}},"pageContext":{"slug":"/spring-boot/optional/","previous":{"fields":{"slug":"/spring-boot/modelmapper/"},"frontmatter":{"title":"[Spring] - ModelMapper"}},"next":{"fields":{"slug":"/PROJECT/legacy-refactoring-1/"},"frontmatter":{"title":"[Spring][Refactoring] - 레거시 코드 리팩터링(0)"}}}}}